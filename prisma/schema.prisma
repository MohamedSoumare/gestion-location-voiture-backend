// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User (Administrator or Agent)
model User {
  id            Int           @id @default(autoincrement())
  fullName      String        @db.VarChar(100)
  email         String        @unique @db.VarChar(100)
  phoneNumber   String        @unique @db.VarChar(20)
  status        String        @db.VarChar(25)
  role          String        @default("agent") @db.VarChar(50)
  customers     Customer[]    @relation("UserCustomers")
  vehicles      Vehicle[]     @relation("UserVehicles")
  reservations  Reservation[] @relation("UserReservations")
  locations     Location[]    @relation("UserLocations")
  tickets       Ticket[]      @relation("UserTickets")
  @@map("users")
}

model Customer {
  id            Int           @id @default(autoincrement())
  fullName      String        @db.VarChar(60)
  address       String?
  nni           Int           @unique
  birthDate     DateTime
  drivingLicense String       @unique @db.VarChar(50)
  phoneNumber   String        @unique @db.VarChar(20)
  reservations  Reservation[]
  user          User?         @relation("UserCustomers", fields: [user_id], references: [id])
  user_id       Int?
  locations     Location[]    @relation("CustomerLocations")
  @@map("customers")
}

// Vehicle
model Vehicle {
  id                Int           @id @default(autoincrement())
  brand             String        @db.VarChar(50)
  model             String        @db.VarChar(50)
  year              Int
  registrationPlate String        @unique @db.VarChar(50)
  status            String        @db.VarChar(25)
  seatCount         Int
  doorCount         Int
  color             String        @db.VarChar(25)
  fuelType          String        @db.VarChar(25)
  transmissionType  String        @db.VarChar(25)
  airConditioning   Boolean
  dailyRate         Decimal       @db.Decimal(10, 2)
  tickets           Ticket[]
  reservations      Reservation[]
  locations         Location[]    @relation("VehicleLocations")
  user              User?         @relation("UserVehicles", fields: [user_id], references: [id])
  user_id           Int?
  @@map("vehicules")
}

// Reservation
model Reservation {
  id            Int           @id @default(autoincrement())
  startDate     DateTime
  endDate       DateTime
  totalAmount   Decimal        @db.Decimal(10, 2)
  status        String         @db.VarChar(25)
  vehicle       Vehicle        @relation(fields: [vehicle_id], references: [id])
  vehicle_id    Int
  customer      Customer       @relation(fields: [customer_id], references: [id])
  customer_id   Int
  user          User?          @relation("UserReservations", fields: [user_id], references: [id])
  user_id       Int?
  @@map("reservations")
}

// Ticket
model Ticket {
  id           Int       @id @default(autoincrement())
  ticketNumber String    @unique @db.VarChar(25)
  exitDate     DateTime
  returnDate   DateTime?
  vehicle      Vehicle   @relation(fields: [vehicle_id], references: [id])
  vehicle_id   Int
  user         User      @relation("UserTickets", fields: [user_id], references: [id])
  user_id      Int
   @@map("tickets")
}

// Location
model Location {
  id            Int          @id @default(autoincrement())
  startDate     DateTime
  returnDate    DateTime?
  status        String       @db.VarChar(50)
  reservation_id Int?
  reservation   Reservation? @relation(fields: [reservation_id], references: [id])
  vehicle       Vehicle      @relation("VehicleLocations", fields: [vehicle_id], references: [id])
  vehicle_id    Int
  customer      Customer     @relation("CustomerLocations", fields: [customer_id], references: [id])
  customer_id   Int
  user          User?        @relation("UserLocations", fields: [user_id], references: [id])
  user_id       Int?
  @@map("locations")
}

// Contract
model Contract {
  id           Int       @id @default(autoincrement())
  contractNumber String  @unique @db.VarChar(50)
  startDate    DateTime
  endDate      DateTime
  totalAmount  Decimal   @db.Decimal(10, 2)
  status       String    @db.VarChar(50)
  locations    Location[] @relation("ContractLocations")
  @@map("contracts")
}
