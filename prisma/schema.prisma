  // This is your Prisma schema file

  generator client {
    provider = "prisma-client-js"
  }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            Int           @id @default(autoincrement())
  fullName      String        @db.VarChar(100)
  email         String        @unique @db.VarChar(100)
  phoneNumber   String        @unique @db.VarChar(20)  
  password      String        @db.VarChar(255)
  status        Boolean
  role          String       @default("employe") @db.VarChar(50)
  customers     Customer[]    @relation("UserCustomers")
  vehicles      Vehicle[]     @relation("UserVehicles")
  reservations  Reservation[] @relation("UserReservations")
  contracts     Contract[]    @relation("UserContracts")
  @@map("users")
}

model Customer {
  id              Int           @id @default(autoincrement())
  fullName        String        @db.VarChar(60)
  address         String?
  nni             String           @unique @db.VarChar(25)
  birthDate       DateTime
  drivingLicense  String        @unique @db.VarChar(50)
  phoneNumber     String        @unique @db.VarChar(20) 
  reservations    Reservation[]
  user            User?         @relation("UserCustomers", fields: [user_id], references: [id])
  user_id         Int?
  contracts       Contract[]    @relation("CustomerContracts")
  @@map("customers")
}

model Vehicle {
  id                Int           @id @default(autoincrement())
  brand             String        @db.VarChar(50)
  model             String        @db.VarChar(50)
  year              Int
  registrationPlate String        @unique @db.VarChar(50)
  status            String        @db.VarChar(25)
  seatCount         Int
  doorCount         Int
  color             String        @db.VarChar(25)
  fuelType          String        @db.VarChar(25)
  transmissionType  String        @db.VarChar(25)
  airConditioning   Boolean
  dailyRate         Decimal       @db.Decimal(10, 2)
  reservations      Reservation[]
  contracts         Contract[]    @relation("VehicleContracts")
  user              User?         @relation("UserVehicles", fields: [user_id], references: [id])
  user_id           Int?
  @@map("vehicules")
}

model Reservation {
  id            Int           @id @default(autoincrement())
  startDate     DateTime
  endDate       DateTime
  totalAmount   Decimal        @db.Decimal(10, 2)
  status        String         @db.VarChar(25)
  vehicle       Vehicle        @relation(fields: [vehicle_id], references: [id])
  vehicle_id    Int
  customer      Customer       @relation(fields: [customer_id], references: [id])
  customer_id   Int
  user          User?          @relation("UserReservations", fields: [user_id], references: [id])
  user_id       Int?
  @@map("reservations")
}

  model Contract {
    id              Int           @id @default(autoincrement())
    contractNumber  String        @unique @db.VarChar(50)
    startDate       DateTime
    returnDate      DateTime?
    totalAmount     Decimal        @db.Decimal(10, 2)
    status          String         @db.VarChar(50)
    vehicle         Vehicle        @relation("VehicleContracts", fields: [vehicle_id], references: [id])
    vehicle_id      Int
    customer        Customer       @relation("CustomerContracts", fields: [customer_id], references: [id])
    customer_id     Int
    user            User?          @relation("UserContracts", fields: [user_id], references: [id])
    user_id         Int?
    @@map("contracts")
  }
